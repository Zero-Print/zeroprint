name: Security Monitoring & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/requirements.txt'

jobs:
  # Dependency Security Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Frontend security audit
        working-directory: frontend
        run: |
          npm audit --audit-level=moderate --json > frontend-audit.json || true
          npm audit --audit-level=moderate

      - name: Install backend dependencies
        working-directory: backend/functions
        run: npm ci

      - name: Backend security audit
        working-directory: backend/functions
        run: |
          npm audit --audit-level=moderate --json > backend-audit.json || true
          npm audit --audit-level=moderate

      - name: Parse audit results
        run: |
          # Check for high/critical vulnerabilities
          FRONTEND_HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")' frontend/frontend-audit.json 2>/dev/null | wc -l || echo "0")
          BACKEND_HIGH=$(jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")' backend/functions/backend-audit.json 2>/dev/null | wc -l || echo "0")
          
          echo "Frontend high/critical vulnerabilities: $FRONTEND_HIGH"
          echo "Backend high/critical vulnerabilities: $BACKEND_HIGH"
          
          if [ "$FRONTEND_HIGH" -gt 0 ] || [ "$BACKEND_HIGH" -gt 0 ]; then
            echo "::error::High or critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            frontend/frontend-audit.json
            backend/functions/backend-audit.json
          retention-days: 30

  # License Compliance Check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Check frontend licenses
        working-directory: frontend
        run: |
          license-checker --json --out frontend-licenses.json
          license-checker --summary

      - name: Install backend dependencies
        working-directory: backend/functions
        run: npm ci

      - name: Check backend licenses
        working-directory: backend/functions
        run: |
          license-checker --json --out backend-licenses.json
          license-checker --summary

      - name: Validate license compliance
        run: |
          # Define prohibited licenses
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.0" "LGPL-2.1" "LGPL-3.0")
          
          # Check frontend licenses
          for license in "${PROHIBITED_LICENSES[@]}"; do
            if grep -q "$license" frontend/frontend-licenses.json; then
              echo "::error::Prohibited license found in frontend: $license"
              exit 1
            fi
          done
          
          # Check backend licenses
          for license in "${PROHIBITED_LICENSES[@]}"; do
            if grep -q "$license" backend/functions/backend-licenses.json; then
              echo "::error::Prohibited license found in backend: $license"
              exit 1
            fi
          done
          
          echo "All licenses are compliant"

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            frontend/frontend-licenses.json
            backend/functions/backend-licenses.json
          retention-days: 30

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ZeroPrint'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression .github/dependency-check-suppressions.xml

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-results
          path: reports/
          retention-days: 30

  # Automated Dependency Updates
  dependency-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update frontend dependencies
        working-directory: frontend
        run: |
          # Update patch and minor versions only
          ncu -u --target minor
          npm install

      - name: Update backend dependencies
        working-directory: backend/functions
        run: |
          # Update patch and minor versions only
          ncu -u --target minor
          npm install

      - name: Run tests after updates
        run: |
          cd frontend && npm test -- --passWithNoTests
          cd ../backend/functions && npm test -- --passWithNoTests

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates to project dependencies:
            
            ### Changes
            - Updated frontend dependencies to latest minor/patch versions
            - Updated backend dependencies to latest minor/patch versions
            
            ### Testing
            - ✅ All existing tests pass
            - ✅ Security audit passed
            - ✅ License compliance verified
            
            ### Review Notes
            Please review the changes and ensure all functionality works as expected.
            Major version updates are excluded and should be handled manually.
          branch: automated-dependency-updates
          delete-branch: true

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Container Security (if using Docker)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t zeroprint:latest .
          else
            echo "No Dockerfile found, skipping container security scan"
            exit 0
          fi

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        if: hashFiles('Dockerfile') != ''
        with:
          image-ref: 'zeroprint:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('Dockerfile') != ''
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,cloudformation,kubernetes,dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Compliance Monitoring
  compliance-check:
    name: Compliance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GDPR/DPDP Compliance Check
        run: |
          # Check for GDPR/DPDP compliance indicators
          echo "Checking for privacy policy..."
          if [ ! -f "PRIVACY_POLICY.md" ]; then
            echo "::warning::Privacy policy not found"
          fi
          
          echo "Checking for data processing documentation..."
          if [ ! -f "DATA_PROCESSING.md" ]; then
            echo "::warning::Data processing documentation not found"
          fi
          
          echo "Checking for cookie policy..."
          if [ ! -f "COOKIE_POLICY.md" ]; then
            echo "::warning::Cookie policy not found"
          fi

      - name: Security Headers Check
        run: |
          # Check for security headers in configuration
          echo "Checking for security headers configuration..."
          
          if grep -r "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" . --include="*.js" --include="*.ts" --include="*.json"; then
            echo "✅ Security headers found in configuration"
          else
            echo "::warning::Security headers not found in configuration"
          fi

      - name: Data Retention Policy Check
        run: |
          echo "Checking for data retention policies..."
          
          if grep -r "retention\|delete\|cleanup" . --include="*.js" --include="*.ts" --include="*.md"; then
            echo "✅ Data retention policies found"
          else
            echo "::warning::Data retention policies not clearly defined"
          fi

  # Notification and Reporting
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, owasp-dependency-check, security-scan, secrets-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Monitoring Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Dependency Audit Results" >> security-report.md
          if [ -f "security-audit-results/frontend-audit.json" ]; then
            echo "- Frontend audit completed" >> security-report.md
          fi
          if [ -f "security-audit-results/backend-audit.json" ]; then
            echo "- Backend audit completed" >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## License Compliance" >> security-report.md
          if [ -f "license-reports/frontend-licenses.json" ]; then
            echo "- Frontend licenses checked" >> security-report.md
          fi
          if [ -f "license-reports/backend-licenses.json" ]; then
            echo "- Backend licenses checked" >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## OWASP Dependency Check" >> security-report.md
          if [ -d "owasp-dependency-check-results" ]; then
            echo "- OWASP dependency check completed" >> security-report.md
          fi
          echo "" >> security-report.md
          
          echo "## Security Scan Results" >> security-report.md
          echo "- Trivy scan completed" >> security-report.md
          echo "- Semgrep scan completed" >> security-report.md
          echo "- Secrets scan completed" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-monitoring-report
          path: security-report.md
          retention-days: 90

      - name: Notify security team on critical findings
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🚨 Critical security findings detected! Please review the security monitoring report.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}