name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: ESLint check
        working-directory: frontend
        run: npm run lint

      - name: TypeScript check
        working-directory: frontend
        run: npm run type-check

      - name: Prettier check
        working-directory: frontend
        run: npm run format:check

      - name: Security audit
        working-directory: frontend
        run: npm audit --audit-level=high

      - name: Dependency vulnerability scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      firebase-emulator:
        image: gcr.io/firebase-tools-docker/firebase-tools:latest
        ports:
          - 9099:9099
          - 8080:8080
          - 5001:5001
          - 8085:8085
        options: >-
          --health-cmd "curl -f http://localhost:9099 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install backend dependencies
        working-directory: backend/functions
        run: npm ci

      - name: Start Firebase Emulators
        working-directory: backend
        run: |
          firebase emulators:start --only auth,firestore,functions,storage --project demo-project &
          sleep 30

      - name: Run backend unit tests
        working-directory: backend/functions
        run: npm test
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: Run backend integration tests
        working-directory: backend/functions
        run: npm run test:integration
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: Generate backend coverage report
        working-directory: backend/functions
        run: npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/functions/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run unit tests
        working-directory: frontend
        run: npm run test:unit

      - name: Run integration tests
        working-directory: frontend
        run: npm run test:integration
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: Generate frontend coverage report
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Run DPDP compliance tests
        working-directory: frontend
        run: npm run test:security:dpdp

      - name: Run security tests
        working-directory: frontend
        run: npm run test:security

      - name: Run penetration tests
        working-directory: frontend
        run: npm run test:security:pentest

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # E2E Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Start application
        working-directory: frontend
        run: |
          npm start &
          sleep 30
        env:
          NODE_ENV: test

      - name: Run E2E tests
        working-directory: frontend
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 7

  # Visual Regression Testing
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install --with-deps chromium

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Start application
        working-directory: frontend
        run: |
          npm start &
          sleep 30

      - name: Run visual regression tests
        working-directory: frontend
        run: npm run test:visual

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-diffs
          path: frontend/test-results/
          retention-days: 7

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Start application
        working-directory: frontend
        run: |
          npm start &
          sleep 30

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:coverage
        
      - name: Check coverage threshold
        working-directory: frontend
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage $COVERAGE% < 70%" && exit 1
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: frontend/performance-results/
          retention-days: 7

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests, security-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: '*-coverage'
          merge-multiple: true

      - name: Quality Gate - Coverage Threshold
        run: |
          # Check frontend coverage
          FRONTEND_COVERAGE=$(grep -o 'lines.*%' frontend/coverage/lcov-report/index.html | head -1 | grep -o '[0-9.]*')
          echo "Frontend coverage: $FRONTEND_COVERAGE%"
          
          # Check backend coverage
          BACKEND_COVERAGE=$(grep -o 'lines.*%' backend/functions/coverage/lcov-report/index.html | head -1 | grep -o '[0-9.]*')
          echo "Backend coverage: $BACKEND_COVERAGE%"
          
          # Fail if coverage is below threshold
          if (( $(echo "$FRONTEND_COVERAGE < 80" | bc -l) )); then
            echo "Frontend coverage $FRONTEND_COVERAGE% is below 80% threshold"
            exit 1
          fi
          
          if (( $(echo "$BACKEND_COVERAGE < 80" | bc -l) )); then
            echo "Backend coverage $BACKEND_COVERAGE% is below 80% threshold"
            exit 1
          fi

      - name: Quality Gate - Security Scan Results
        run: |
          # Check for high/critical vulnerabilities
          if [ -f "security-scan-results.json" ]; then
            HIGH_VULNS=$(jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical")' security-scan-results.json | wc -l)
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "Found $HIGH_VULNS high/critical vulnerabilities"
              exit 1
            fi
          fi

      - name: Quality Gate - Test Results
        run: |
          echo "All quality gates passed successfully!"

  # Build and Deploy (Staging)
  build-deploy-staging:
    name: Build & Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_FIREBASE_CONFIG: ${{ secrets.STAGING_FIREBASE_CONFIG }}
          NEXT_PUBLIC_RAZORPAY_KEY: ${{ secrets.STAGING_RAZORPAY_KEY }}

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
          projectId: zeroprint-staging
          channelId: live

      - name: Deploy Cloud Functions (Staging)
        working-directory: backend/functions
        run: |
          npm ci
          npm run deploy:staging
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run smoke tests on staging
        working-directory: frontend
        run: npm run test:smoke
        env:
          PLAYWRIGHT_BASE_URL: https://zeroprint-staging.web.app

  # Build and Deploy (Production)
  build-deploy-production:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_FIREBASE_CONFIG: ${{ secrets.PRODUCTION_FIREBASE_CONFIG }}
          NEXT_PUBLIC_RAZORPAY_KEY: ${{ secrets.PRODUCTION_RAZORPAY_KEY }}

      - name: Deploy to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}'
          projectId: zeroprint-production
          channelId: live

      - name: Deploy Cloud Functions (Production)
        working-directory: backend/functions
        run: |
          npm ci
          npm run deploy:production
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run smoke tests on production
        working-directory: frontend
        run: npm run test:smoke
        env:
          PLAYWRIGHT_BASE_URL: https://zeroprint.com

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch
            
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Quality Metrics
            - All tests passed ✅
            - Security scans passed ✅
            - Performance benchmarks met ✅
            - Code coverage above 80% ✅
          draft: false
          prerelease: false

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-deploy-production, build-deploy-staging]
    if: always()
    steps:
      - name: Notify on success
        if: needs.build-deploy-production.result == 'success' || needs.build-deploy-staging.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Pipeline failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}