name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

jobs:
  # ============================================================================
  # LINTING & TYPECHECK
  # ============================================================================
  lint-and-typecheck:
    name: Lint & TypeCheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
          npm run lint:fix

      - name: Lint backend
        run: |
          cd backend/functions
          npm run lint
          npm run lint:fix

      - name: Typecheck frontend
        run: |
          cd frontend
          npm run typecheck

      - name: Typecheck backend
        run: |
          cd backend/functions
          npm run typecheck

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    strategy:
      matrix:
        test-dir: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ${{ matrix.test-dir }}/functions && npm ci || cd ${{ matrix.test-dir }} && npm ci

      - name: Run unit tests
        run: |
          cd ${{ matrix.test-dir }}/functions && npm test || cd ${{ matrix.test-dir }} && npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./${{ matrix.test-dir }}/coverage/lcov.info
          flags: ${{ matrix.test-dir }}

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      firebase-emulator:
        image: gcr.io/google.com/cloudsdktool/cloud-sdk:emulators
        ports:
          - 8080:8080
          - 9099:9099
          - 5001:5001
        options: >-
          --health-cmd "curl -f http://localhost:8080 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend/functions && npm ci
          cd ../../frontend && npm ci

      - name: Start Firebase emulators
        run: |
          cd backend
          firebase emulators:start --only firestore,functions,auth &
          sleep 30

      - name: Run integration tests
        run: |
          cd backend/functions
          npm run test:integration

      - name: Stop emulators
        run: pkill -f firebase

  # ============================================================================
  # BUILD TESTS
  # ============================================================================
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build backend
        run: |
          cd backend/functions
          npm run build

      - name: Test build artifacts
        run: |
          # Test frontend build
          cd frontend
          test -d .next || (echo "Frontend build failed" && exit 1)
          
          # Test backend build
          cd ../backend/functions
          test -d lib || (echo "Backend build failed" && exit 1)

  # ============================================================================
  # E2E TESTS
  # ============================================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start Firebase emulators
        run: |
          cd backend
          firebase emulators:start --only firestore,functions,auth &
          sleep 30

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &
          sleep 30

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/

  # ============================================================================
  # VISUAL REGRESSION TESTS
  # ============================================================================
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start Firebase emulators
        run: |
          cd backend
          firebase emulators:start --only firestore,functions,auth &
          sleep 30

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &
          sleep 30

      - name: Run visual tests
        run: |
          cd frontend
          npm run test:visual

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: frontend/test-results/

  # ============================================================================
  # LOAD TESTS
  # ============================================================================
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        run: |
          cd backend/functions && npm ci

      - name: Start Firebase emulators
        run: |
          cd backend
          firebase emulators:start --only firestore,functions,auth &
          sleep 30

      - name: Run load tests
        run: |
          cd backend/functions
          npm run test:load

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: backend/functions/load-test-results/

  # ============================================================================
  # SECURITY TESTS
  # ============================================================================
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Run security audit
        run: |
          cd frontend && npm audit --audit-level moderate
          cd ../backend/functions && npm audit --audit-level moderate

      - name: Run Firestore rules tests
        run: |
          cd backend
          npm install -g @firebase/rules-unit-testing
          npm run test:rules

      - name: Run dependency vulnerability scan
        run: |
          cd frontend && npm audit --audit-level high
          cd ../backend/functions && npm audit --audit-level high

  # ============================================================================
  # ACCESSIBILITY TESTS
  # ============================================================================
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start Firebase emulators
        run: |
          cd backend
          firebase emulators:start --only firestore,functions,auth &
          sleep 30

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &
          sleep 30

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:a11y

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: a11y-test-results
          path: frontend/a11y-results/

  # ============================================================================
  # QUALITY GATES
  # ============================================================================
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, visual-tests, load-tests, security-tests, accessibility-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Checking test results..."
          
          # Check if all required tests passed
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.visual-tests.result }}" != "success" ]]; then
            echo "❌ Visual tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.load-tests.result }}" != "success" ]]; then
            echo "❌ Load tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "❌ Security tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
            echo "❌ Accessibility tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed"

  # ============================================================================
  # DEPLOYMENT (STAGING)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Build applications
        run: |
          cd frontend && npm run build
          cd ../backend/functions && npm run build

      - name: Deploy to Firebase (Staging)
        run: |
          cd backend
          firebase use staging
          firebase deploy --only functions,hosting,firestore:rules

      - name: Log deployment
        run: |
          curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 ZeroPrint deployed to staging",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Environment",
                  "value": "staging",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "develop",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }'

  # ============================================================================
  # DEPLOYMENT (PRODUCTION)
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend/functions && npm ci

      - name: Build applications
        run: |
          cd frontend && npm run build
          cd ../backend/functions && npm run build

      - name: Deploy to Firebase (Production)
        run: |
          cd backend
          firebase use production
          firebase deploy --only functions,hosting,firestore:rules

      - name: Log deployment
        run: |
          curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 ZeroPrint deployed to production",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Environment",
                  "value": "production",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "main",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }'

      - name: Run post-deployment tests
        run: |
          cd frontend
          npm run test:smoke

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "❌ ZeroPrint CI/CD pipeline failed",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Workflow",
                  "value": "${{ github.workflow }}",
                  "short": true
                }]
              }]
            }'
